[package]
name = "renderer"
version = "0.1.0"
edition = "2021"
resolver = "2"

[lib]
# These lines tell Cargo that we want to allow our crate to build a native Rust static library (rlib)
# and a C/C++ compatible library (cdylib). We need rlib if we want to run wgpu in a desktop environment.
# We need cdylib to create the Web Assembly that the browser will run.
crate-type = ["cdylib", "rlib"]
path = "src/lib.rs"
name = "renderer_core"

# shared dependencies
[dependencies]
bytemuck = { version = "1.20", features = ["derive"] }
cfg-if = "1"
egui = "0.29"
egui-winit = { version = "0.29", default-features = false }
egui_wgpu_backend = { git = "https://github.com/hasenbanck/egui_wgpu_backend", rev = "e34ace6" }
futures = "0.3"
image = { version = "0.25", default-features = false, features = ["png", "jpeg"] }
lazy_static = "1.5"
log = "0.4"
nalgebra = { version = "0.33", features = ["bytemuck"] }
wgpu = "23.0"
winit = { version = "0.30", features = ["rwh_06"] }

# non-wasm32 dependencies
[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
pollster = "0.4.0"
log4rs = "1.3"

# wasm32 dependencies
[target.'cfg(target_arch = "wasm32")'.dependencies]
console_error_panic_hook = "0.1"
console_log = "1.0.0"
wasm-bindgen = "0.2"
wasm-bindgen-futures = "0.4"
web-sys = { version = "0.3", features = [
    "Window",
    "Document",
    "HtmlElement",
    "Node",
    "Text",
    "Element",
    "Location"
] }
web-time = "1.1"
reqwest = { version = "0.12.9" }
getrandom = { version = "*", features = ["js"] }
log = "0.4"
